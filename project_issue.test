<?php
// $Id: project_issue.test,v 1.3 2010/04/20 22:22:06 dww Exp $

include_once drupal_get_path('module', 'project') . '/project.test';

class ProjectIssueWebTestCase extends ProjectWebTestCase {

  function setUp() {
    // Setup the required modules for all tests.
    $modules = func_get_args();
    $modules = array_merge(array('project_issue', 'views', 'comment', 'comment_upload', 'upload'), $modules);
    // We can't call parent::setUp() with a single array argument, so we need
    // this ugly call_user_func_array().
    call_user_func_array(array($this, 'parent::setUp'), $modules);
    variable_set('comment_preview_project_issue', FALSE);
  }

  /**
   * Create an Issue node.
   *
   * @param stdClass $project
   *   A project node.
   * @param array $edit
   *   An array of form values, passed to drupalPost. Optional
   * @return
   *   An issue node.
   */
  function createIssue($project, $edit = array()) {
    // If people are lazy and don't want to specify any of these, provide a
    // default.
    $edit += array(
      'title' => $this->randomName(8),
      'body' => $this->randomName(64),
      'component' => 'Code',
      'category' => 'bug',
    );

    $this->drupalPost('node/add/project-issue/' . $project->project['uri'], $edit, t('Save'));
    $this->assertRaw(t('!post %title has been created.', array('!post' => 'Issue', '%title' => $edit["title"])), t('Issue created.'));

    return $this->drupalGetNodeByTitle($edit['title']);
  }

  function createIssueComment($issue, $edit = array()) {
    $edit += array('comment' => $this->randomName(64));
    $this->drupalPost('comment/reply/' . $issue->nid, $edit, t('Save'));
    return $edit;
  }

  /**
   * Make sure issue metadata matches up to what it's intended to be.
   *
   * @param array $metadata
   *   Associative array of expected issue metadata field names and values.
   * @param $nid
   *   Optional integer node ID of the issue to check metadata fields for.
   */
  function assertIssueMetadata($metadata, $nid = NULL) {
    $pass = TRUE;
    if ($nid) {
      $this->drupalGet('node/' . $nid);
    }
    foreach ($this->xpath("//div[@id='project-issue-summary-table']/table//tr") as $row) {
      $key = strtolower(trim((string)$row->td[0], ':'));
      if (isset($metadata[$key])) {
        if (strtolower($metadata[$key]) != strtolower((string)$row->td[1])) {
          $pass = FALSE;
        }
      }
    }
    if ($pass) {
      $this->pass(t('Issue metadata matches'));
    }
    else {
      $this->fail(t('Issue metadata matches'));
    }
  }
}

class ProjectIssueCreationTestCase extends ProjectIssueWebTestCase {
  protected $maintain_user;

  public static function getInfo() {
    return array(
      'name' => 'Project issue creation',
      'description' => 'Test creating an issue.',
      'group' => 'Project Issue',
    );
  }

  function setUp() {
    parent::setUp();

    $this->maintain_user = $this->drupalCreateUser(array('maintain projects', 'create project issues', 'access project issues', 'access projects'));
    $this->drupalLogin($this->maintain_user);
  }

  /**
   * Test the creation of project issues and the display of issue properties.
   */
  function testProjectIssueCreation() {
    $project = $this->createProject();

    // Test project issue node form fields.
    $this->drupalGet('node/add/project-issue/' . $project->project['uri']);
    $this->assertText(t('Create Issue'));

    $issue = $this->createIssue($project, array(
      'component' => 'Miscellaneous',
      'category' => 'feature',
      'priority' => 1,
      'assigned' => $this->maintain_user->uid,
    ));

    $this->assertText($issue->title, t('Title found'));
    $this->assertText($issue->body, t('Body found'));
    $issue = $this->createIssue($project, array(
      'component' => 'Miscellaneous',
      'category' => 'feature',
      'priority' => 1,
      'assigned' => $this->maintain_user->uid,
    ));
    $this->assertIssueMetadata(array(
      'component' => 'Miscellaneous',
      'category' => 'feature request',
      'priority' => 'critical',
      'assigned' => $this->maintain_user->name,
    ));
  }
}

class ProjectIssueCommentTestCase extends ProjectIssueWebTestCase {
  public static function getInfo() {
    return array(
      'name' => 'Project issue comment',
      'description' => 'Test commenting on an issue.',
      'group' => 'Project Issue',
    );
  }

  function setUp() {
    parent::setUp();

    $maintain_user = $this->drupalCreateUser(array('maintain projects', 'create project issues', 'access project issues', 'access projects'));
    $this->drupalLogin($maintain_user);
  }

  /**
   * Test the creation of issue metadata.
   */
  function testProjectIssueMetadata() {
    $project = $this->createProject();
    // Test project issue node form fields.
    $issue = $this->createIssue($project);
    $html = $this->drupalGet('comment/reply/' . $issue->nid);
    $this->parse();
    // Let's iterate over all the forms.
    $forms = $this->xpath('//form');
    $form = $forms[0];
    // We try to set the fields of this form as specified in $edit.
    $post = $upload = $edit = array();
    $this->handleForm($post, $edit, $upload, NULL, $form);
    $map = array(
      'priority' => 'priority',
      'category' => 'category',
      'component' => 'project_info[component]',
      'assigned' => 'project_info[assigned]',
      'pid' => 'project_info[pid]',
    );
    foreach ($map as $issue_key => $post_key) {
      $this->assertEqual($issue->project_issue[$issue_key], $post[$post_key], t('Making sure comment form is correct'));
    }
  }

  /**
   * Test the creation of issue comments.
   */
  function testProjectIssueComment() {
    $project = $this->createProject();
    // Test project issue node form fields.
    $issue = $this->createIssue($project);
    $comment = $this->createIssueComment($issue);
    $this->assertText($comment['comment'], t('Body found'));
  }
}
