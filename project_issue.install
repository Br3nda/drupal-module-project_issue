<?php
// $Id: project_issue.install,v 1.55 2009/01/20 18:38:03 dww Exp $

/**
 * Implementation of hook_schema().
 */
function project_issue_schema() {
  $schema['project_issue_projects'] = array(
    'description' => t('TODO'),
    'fields' => array(
      'nid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'issues' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'components' => array(
        'description' => t('TODO'),
        'type' => 'text',
        'not null' => FALSE,
      ),
      'help' => array(
        'description' => t('TODO'),
        'type' => 'text',
        'not null' => FALSE,
      ),
      'mail_digest' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_copy' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_copy_filter' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_copy_filter_state' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'mail_reminder' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('nid'),
  );

  $schema['project_issues'] = array(
    'description' => t('TODO'),
    'fields' => array(
      'nid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'category' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'component' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'priority' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'rid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'assigned' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'sid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'original_issue_data' => array(
        'description' => t('TODO'),
        'type' => 'text',
        'not null' => TRUE,
      ),
      'last_comment_id' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'db_lock' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'project_issues_pid' => array('pid'),
      'project_issues_sid' => array('sid'),
      'project_issues_nid_assigned' => array('nid', 'assigned'),
    ),
    'primary key' => array('nid'),
  );

  $schema['project_issue_comments'] = array(
    'description' => t('TODO'),
    'fields' => array(
      'nid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'not null' => FALSE,
      ),
      'cid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'not null' => FALSE,
      ),
      'rid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'component' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'category' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
        'default' => '',
      ),
      'priority' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'assigned' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'sid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
      'pid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'title' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 255,
        'not null' => TRUE,
      ),
      'timestamp' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
      ),
      'comment_number' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'nid_timestamp' => array('nid', 'timestamp'),
      'comment_number' => array('comment_number'),
    ),
  );

  $schema['project_subscriptions'] = array(
    'description' => t('TODO'),
    'fields' => array(
      'nid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'uid' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
      'level' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'size' => 'tiny',
        'unsigned' => 1,
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'indexes' => array(
      'project_subscriptions_nid_uid_level' => array('nid', 'uid', 'level'),
    ),
  );

  $schema['project_issue_state'] = array(
    'description' => t('TODO'),
    'fields' => array(
      'sid' => array(
        'description' => t('TODO'),
        'type' => 'serial',
        'unsigned' => 1,
        'not null' => TRUE,
      ),
      'name' => array(
        'description' => t('TODO'),
        'type' => 'varchar',
        'length' => 64,
        'not null' => TRUE,
        'default' => '',
      ),
      'weight' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'author_has' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
      'default_query' => array(
        'description' => t('TODO'),
        'type' => 'int',
        'size' => 'tiny',
        'not null' => TRUE,
        'default' => 0,
      ),
    ),
    'primary key' => array('sid'),
  );

  return $schema;
}

function project_issue_install() {
  // We need to check this before we try to create the table, so that
  // if it already exists, we don't attempt to insert our own values.
  $project_issue_state_existed = db_table_exists('project_issue_state');

  // Create tables.
  drupal_install_schema('project_issue');

  if (!$project_issue_state_existed) {
    // sid, name, weight, author-can-set, in-default-queries
    project_issue_init_state(1, 'active', -13, 0, 1);
    project_issue_init_state(2, 'fixed', 1, 0, 1);
    project_issue_init_state(3, 'duplicate', 4, 0, 0);
    project_issue_init_state(4, 'postponed', 6, 0, 1);
    project_issue_init_state(5, 'won\'t fix', 9, 0, 0);
    project_issue_init_state(6, 'by design', 11, 0, 0);
    project_issue_init_state(7, 'closed', 13, 1, 0);
    project_issue_init_state(8, 'patch (code needs review)', -8, 0, 0);
    project_issue_init_state(13, 'patch (code needs work)', -6, 0, 0);
    project_issue_init_state(14, 'patch (ready to commit)', -2, 0, 0);

    // Since we're hacking in auto-increment values here,
    // update the sequence value for Postgres -- ugly but necessary for now.
    if ($GLOBALS['db_type'] == 'pgsql') {
      db_query("SELECT setval('project_issue_state_sid_seq', 14)");
    }
  }

  project_issue_add_missing_projects();

  db_query("UPDATE {system} SET weight = 2 WHERE name = 'project_issue'");

  // Set up future followups to be read/write.
  if (module_exists('comment')) {
    variable_set('comment_project_issue', COMMENT_NODE_READ_WRITE);
  }
  // Enable file attachments for followups.
  variable_set('comment_upload_project_issue', 1);
  // Enable file attachments for issues.
  variable_set('upload_project_issue', 1);
}

/**
 * Implementation of hook_uninstall().
 */
function project_issue_uninstall() {
  // Remove tables.
  drupal_uninstall_schema('project_issue');

  $variables = array(
    'project_issue_default_state',
    'project_directory_issues',
    'project_reply_to',
    'project_issue_digest_last',
    'project_issue_digest_interval',
    'project_issue_reminder_last',
    'project_issue_reminder_interval',
    'project_issue_show_comment_signatures',
    'project_issue_site_help',
    'project_issue_invalid_releases',
    'project_issue_followup_user',
    'project_issue_hook_cron',
  );
  foreach ($variables as $variable) {
    variable_del($variable);
  }
}

function project_issue_enable() {
  project_issue_add_missing_projects();
}

/**
 * Initialize a given issue state in the database.
 */
function project_issue_init_state($sid, $name, $weight, $author, $query) {
  db_query("INSERT INTO {project_issue_state} (sid, name, weight, author_has, default_query) VALUES (%d, '%s', %d, %d, %d)", $sid, $name, $weight, $author, $query);
}

/**
 * Check for existing project nodes that do not have an entry in the
 * {project_issue_projects} table, and add them.
 *
 */
function project_issue_add_missing_projects() {
  $projects = db_query("SELECT n.nid, pip.nid AS pip_nid FROM {node} n LEFT JOIN {project_issue_projects} pip ON n.nid = pip.nid WHERE n.type = 'project_project' AND pip.nid IS NULL");
  while ($project = db_fetch_object($projects)) {
    db_query('INSERT INTO {project_issue_projects} (nid) VALUES (%d)', $project->nid);
  }
}

/**
 * Remove stale setting that's now provided by views.
 */
function project_issue_update_6000() {
  variable_del('project_issues_per_page');
  return array();
}

