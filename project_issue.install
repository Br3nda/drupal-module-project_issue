<?php
// $Id: project_issue.install,v 1.1.2.2.2.5 2007/08/09 20:27:39 thehunmonkgroup Exp $
// $Name:  $

function project_issue_install() {
  // We need to check this before we try to create the table, so that
  // if it already exists, we don't attempt to insert our own values.
  $project_issue_state_existed = project_issue_db_table_exists('project_issue_state');
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      db_query("CREATE TABLE IF NOT EXISTS {project_issue_projects} (
          nid int(10) unsigned NOT NULL default '0',
          issues tinyint(4) NOT NULL default '0',
          components text,
          help text,
          mail_digest varchar(255) NOT NULL default '',
          mail_copy varchar(255) NOT NULL default '',
          mail_copy_filter varchar(255) NOT NULL default '',
          mail_copy_filter_state varchar(255) NOT NULL default '',
          mail_reminder tinyint(4) NOT NULL default '0',
          PRIMARY KEY (nid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE IF NOT EXISTS {project_issues} (
          nid int(10) unsigned NOT NULL default '0',
          pid int(10) unsigned NOT NULL default '0',
          category varchar(255) NOT NULL default '',
          component varchar(255) NOT NULL default '',
          priority tinyint(3) unsigned NOT NULL default '0',
          rid int(10) unsigned NOT NULL default '0',
          assigned int(10) unsigned NOT NULL default '0',
          sid int(10) unsigned NOT NULL default '0',
          file_path varchar(255) NOT NULL default '',
          file_mime varchar(255) NOT NULL default '',
          file_size int NOT NULL default 0,
          PRIMARY KEY (nid),
          KEY project_issues_pid (pid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE IF NOT EXISTS {project_comments} (
          cid int(10) unsigned NOT NULL default '0',
          nid int(10) unsigned NOT NULL default '0',
          uid int(10) unsigned NOT NULL default '0',
          name varchar(255) NOT NULL default '',
          created int(10) unsigned NOT NULL default '0',
          changed int(10) unsigned NOT NULL default '0',
          body blob,
          data blob,
          file_path varchar(255) NOT NULL default '',
          file_mime varchar(255) NOT NULL default '',
          file_size int NOT NULL default 0,
          PRIMARY KEY (cid),
          KEY project_comments_nid (nid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE IF NOT EXISTS {project_subscriptions} (
          nid int(10) unsigned NOT NULL default '0',
          uid int(10) unsigned NOT NULL default '0',
          level tinyint(3) unsigned NOT NULL default '0',
          KEY project_subscriptions_nid_uid_level (nid, uid, level)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      db_query("CREATE TABLE IF NOT EXISTS {project_issue_state} (
          sid int(10) unsigned NOT NULL auto_increment,
          name varchar(32) NOT NULL default '',
          weight tinyint(2) DEFAULT '0' NOT NULL,
          author_has tinyint(2) DEFAULT '0' NOT NULL,
          PRIMARY KEY (sid)
        ) /*!40100 DEFAULT CHARACTER SET utf8 */;");
      break;

    case 'pgsql':
      if (!project_issue_db_table_exists('project_issue_projects')) {
        db_query("CREATE TABLE {project_issue_projects} (
            nid int NOT NULL default '0',
            issues smallint NOT NULL default '0',
            components text,
            help text,
            mail_digest varchar(255) not null default '',
            mail_copy varchar(255) not null default '',
            mail_copy_filter varchar(255) not null default '',
            mail_copy_filter_state varchar(255) default '' not null,
            mail_reminder smallint NOT NULL default '0',
            PRIMARY KEY (nid)
          );");
      }
      if (!project_issue_db_table_exists('project_issues')) {
        db_query("CREATE TABLE {project_issues} (
            nid int NOT NULL default '0',
            pid int NOT NULL default '0',
            category varchar(255) NOT NULL default '',
            component varchar(255) NOT NULL default '',
            priority smallint NOT NULL default '0',
            rid int NOT NULL default '0',
            assigned int NOT NULL default '0',
            sid int NOT NULL default '0',
            file_path varchar(255) NOT NULL default '',
            file_mime varchar(255) default '' NOT NULL,
            file_size int default 0 NOT NULL,
            PRIMARY KEY (nid)
          );");
      }
      if (!project_issue_db_table_exists('project_comments')) {
        db_query("CREATE TABLE {project_comments} (
            cid int NOT NULL default '0',
            nid int NOT NULL default '0',
            uid int NOT NULL default '0',
            name varchar(255) NOT NULL default '',
            created int NOT NULL default '0',
            changed int NOT NULL default '0',
            body bytea,
            data bytea,
            file_path varchar(255) default '' NOT NULL,
            file_mime varchar(255) default '' NOT NULL,
            file_size int default 0 NOT NULL,
            PRIMARY KEY (cid)
          );");
        db_query("CREATE SEQUENCE {project}_cid_seq INCREMENT 1 START 1");
      }
      if (!project_issue_db_table_exists('project_subscriptions')) {
        db_query("CREATE TABLE {project_subscriptions} (
            nid int NOT NULL default '0',
            uid int NOT NULL default '0',
            level smallint NOT NULL default '0'
          );");
      }
      if (!project_issue_db_table_exists('project_issue_state')) {
        db_query("CREATE TABLE {project_issue_state} (
            sid SERIAL,
            name varchar(32) NOT NULL default '',
            weight smallint DEFAULT '0' NOT NULL,
            author_has smallint DEFAULT '0' NOT NULL,
            PRIMARY KEY  (sid)
          );");
      }
      break;
  }

  if (!$project_issue_state_existed) {
    db_query("INSERT INTO {project_issue_state} VALUES (1, 'active', -13, 0)");
    db_query("INSERT INTO {project_issue_state} VALUES (2, 'fixed', 1, 0)");
    db_query("INSERT INTO {project_issue_state} VALUES (3, 'duplicate', 4, 0)");
    db_query("INSERT INTO {project_issue_state} VALUES (4, 'postponed', 6, 0)");
    db_query("INSERT INTO {project_issue_state} VALUES (5, 'won\'t fix', 9, 0)");
    db_query("INSERT INTO {project_issue_state} VALUES (6, 'by design', 11, 0)");
    db_query("INSERT INTO {project_issue_state} VALUES (7, 'closed', 13, 1)");
    db_query("INSERT INTO {project_issue_state} VALUES (8, 'patch (code needs review)', -8, 0)");
    db_query("INSERT INTO {project_issue_state} VALUES (13, 'patch (code needs work)', -6, 0)");
    db_query("INSERT INTO {project_issue_state} VALUES (14, 'patch (ready to commit)', -2, 0)");

	// Since we're hacking in auto-increment values here,
	// update the sequence value for Postgres -- ugly but necessary for now.
	if ($GLOBALS['db_type'] == 'pgsql') {
	  db_query("SELECT setval('project_issue_state_sid_seq', 14)");
	}
  }
}

/**
 * Repairs DB from issues that were automatically closed and lost
 * their version info.  See http://drupal.org/node/84555
 */
function project_issue_update_1() {
  $ret = array();
  // Instead of calling update_sql() on every query (which would
  // generate 1000s of lines of output to update.php) this update is
  // going to do the queries directly and just return a summary.
  $fixed = 0;

  $query = db_query("SELECT * FROM {project_comments} WHERE uid = 0 AND data RLIKE 'rid' ORDER by cid");
  while ($comment = db_fetch_object($query)) {
    $data = unserialize($comment->data);
    $old_rid = $data['old']->rid;
    $new_rid = $data['new']->rid;
    if (isset($old_rid) && !isset($new_rid)) {
      // This is the problem case.  Just clear out rid from both old
      // and new, so we leave it alone with this comment.
      unset($data['old']->rid);
      unset($data['new']->rid);
      db_query("UPDATE {project_comments} SET data = '%s' WHERE cid = %d", serialize($data), $comment->cid);
      // Now, repair the issue node itself.  Note, this is potentially
      // inefficient, since it's possible there are multiple comments
      // in the same issue that need to be repaired.  However, since
      // we "ORDER BY cid" in the query above, we know we'll always
      // repair sequentially, so the last repaired comment in an issue
      // will be what's stored in the issue when this update is over...
      db_query("UPDATE {project_issues} SET rid = %d WHERE nid = %d", $old_rid, $comment->nid);
      $fixed++;
    }
  }
  $ret[] = array('success' => TRUE, 'query' => "Repaired $fixed comments");
  return $ret;
}

/**
 * Add missing sequence for project comments on pgsql.  To avoid SQL
 * errors when update.php runs (in case the update is run multiple
 * times, or a site manually fixed this bug already, etc), we make
 * sure this sequence doesn't already exist before we try to create it.
 */
function project_issue_update_2() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'pgsql':
      if (!db_num_rows(db_query("SELECT relname FROM pg_class WHERE relname = '{project}_cid_seq' AND relkind='S'"))) {
        $ret[] = update_sql("CREATE SEQUENCE {project}_cid_seq INCREMENT 1 START 1");
      }
      break;
  }
  return $ret;
}

/**
 * Fix custom issue states. The sid needs to be set properly for the sequence.
 */
function project_issue_update_3() {
  $ret = array();
  switch ($GLOBALS['db_type']) {
    case 'pgsql':
      $last_sid = db_result(db_query('SELECT MAX(sid) FROM project_issue_state'));
      db_query("SELECT setval('project_issue_state_sid_seq', %d)", $last_sid);
      break;
  }
  return $ret;
}

function project_issue_db_table_exists($table) {
  switch ($GLOBALS['db_type']) {
    case 'mysql':
    case 'mysqli':
      return db_num_rows(db_query("SHOW TABLES LIKE '{" . db_escape_table($table) . "}'"));
      break;

    case 'pgsql':
      return db_num_rows(db_query("SELECT relname FROM pg_class WHERE relname = '{" . db_escape_table($table) . "}'"));
      break;
  }
}
